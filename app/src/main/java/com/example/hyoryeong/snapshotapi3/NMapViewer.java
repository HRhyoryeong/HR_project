package com.example.hyoryeong.snapshotapi3;

/**
 * Created by Hyoryeong on 2018-02-12.
 */

/*
 * Copyright 2016 NAVER Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Rect;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.provider.Settings;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.Toast;
import com.nhn.android.maps.NMapActivity;
import com.nhn.android.maps.NMapCompassManager;
import com.nhn.android.maps.NMapController;
import com.nhn.android.maps.NMapLocationManager;
import com.nhn.android.maps.NMapOverlay;
import com.nhn.android.maps.NMapOverlayItem;
import com.nhn.android.maps.NMapView;
import com.nhn.android.maps.maplib.NGeoPoint;
import com.nhn.android.maps.nmapmodel.NMapError;
import com.nhn.android.maps.nmapmodel.NMapPlacemark;
import com.nhn.android.maps.overlay.NMapCircleData;
import com.nhn.android.maps.overlay.NMapCircleStyle;
import com.nhn.android.maps.overlay.NMapPOIdata;
import com.nhn.android.maps.overlay.NMapPOIitem;
import com.nhn.android.maps.overlay.NMapPathData;
import com.nhn.android.maps.overlay.NMapPathLineStyle;
import com.nhn.android.mapviewer.overlay.NMapCalloutCustomOverlay;
import com.nhn.android.mapviewer.overlay.NMapCalloutOverlay;
import com.nhn.android.mapviewer.overlay.NMapMyLocationOverlay;
import com.nhn.android.mapviewer.overlay.NMapOverlayManager;
import com.nhn.android.mapviewer.overlay.NMapPOIdataOverlay;
import com.nhn.android.mapviewer.overlay.NMapPathDataOverlay;

import java.util.Timer;
import java.util.TimerTask;

/**
 * Sample class for map viewer library.
 *
 * @author kyjkim
 */
public class NMapViewer extends NMapActivity {
    private static final String LOG_TAG = "NMapViewer";
    private static final boolean DEBUG = false;

    // set your Client ID which is registered for NMapViewer library.
    private static final String CLIENT_ID = "mqqYIZf6ydtx4Rv2Wy71";

    private MapContainerView mMapContainerView;

    private NMapView mMapView;
    private NMapController mMapController;

    private static final NGeoPoint NMAP_LOCATION_DEFAULT = new NGeoPoint(127.05969579999999, 37.6194965);
    private static final int NMAP_ZOOMLEVEL_DEFAULT = 11;
    private static final int NMAP_VIEW_MODE_DEFAULT = NMapView.VIEW_MODE_VECTOR;
    private static final boolean NMAP_TRAFFIC_MODE_DEFAULT = false;
    private static final boolean NMAP_BICYCLE_MODE_DEFAULT = false;

    private static final String KEY_ZOOM_LEVEL = "NMapViewer.zoomLevel";
    private static final String KEY_CENTER_LONGITUDE = "NMapViewer.centerLongitudeE6";
    private static final String KEY_CENTER_LATITUDE = "NMapViewer.centerLatitudeE6";
    private static final String KEY_VIEW_MODE = "NMapViewer.viewMode";
    private static final String KEY_TRAFFIC_MODE = "NMapViewer.trafficMode";
    private static final String KEY_BICYCLE_MODE = "NMapViewer.bicycleMode";

    private SharedPreferences mPreferences;

    private NMapOverlayManager mOverlayManager;

    private NMapMyLocationOverlay mMyLocationOverlay;
    private NMapLocationManager mMapLocationManager;
    private NMapCompassManager mMapCompassManager;

    private NMapViewerResourceProvider mMapViewerResourceProvider;

    private NMapPOIdataOverlay mFloatingPOIdataOverlay;
    private NMapPOIitem mFloatingPOIitem;

    private static boolean USE_XML_LAYOUT = false;

    Timer timer;
    int[] color={0x66FF66, 0xFFCC33, 0xFF0000, 0x99CCFF, 0x990033};
    int i=0;
    final double[] wolgye1locat={127.06800857238747, 37.615536754261989 ,  127.06801197862414, 37.615437619067542 , 127.06774837079908, 37.615221458271755,
             127.06605194151736, 37.614304866324147 ,  127.06594372381518, 37.614281944675994 ,  127.06486632553198, 37.614222038623318 ,
             127.0628925772738, 37.614343915584001 ,  127.06274332272696, 37.614314069009197 ,  127.06242197958605, 37.614285837610012 ,
             127.06220997009201, 37.614332371748603 ,  127.06201426203482, 37.61437558597575 ,  127.06171702829764, 37.614519571488991 ,
             127.06151570909817, 37.614617096961638 ,  127.06146171720876, 37.61464618995371 ,  127.06123067319538, 37.614771316237366 ,
             127.06091110833297, 37.614947218826607 ,  127.0606059962732, 37.615651383411411,  127.05690909367502, 37.618115240615253 ,
             127.05420819236393, 37.620174655173912 ,  127.05396214394193, 37.620380457000401 ,  127.05384471611694, 37.620478773023621 ,
             127.05373186031559, 37.620575190868713 ,  127.05335326119129, 37.620901508597925 ,  127.05272211005695, 37.621525405722252 ,
             127.05216973796297, 37.622094680588383 ,  127.05110540681335, 37.623245479284904 ,  127.04998624978273, 37.624430946272589 ,
             127.05904280171167, 37.630199955219503 ,  127.05908544459702, 37.630054773520982 ,  127.05914108099465, 37.629870206730814 ,
             127.05915800207111, 37.629814427437644 ,  127.05921781493996, 37.629642229071493 ,  127.05931261026021, 37.629370603821123 ,
             127.05962539990419, 37.628577465704417 ,  127.0599118324496, 37.627930696124423 ,  127.05994345429558, 37.627859763213515 ,
             127.05997213928985, 37.627796792596897 ,  127.06016656001324, 37.627372814945488,  127.0607376442188, 37.626285411935996 ,
             127.06165558751466, 37.624325065628085 ,  127.06205729121993, 37.623403818462592 ,  127.06240635770386, 37.623356657403306 ,
             127.06430279482919, 37.619033856299986 ,  127.06508235969169, 37.617234895558326 ,  127.06507926548858, 37.617163056206394,
             127.06512997331086, 37.616968327864235 ,  127.06516733005691, 37.616877204639081 ,  127.06545605006346, 37.616224282260518 ,
             127.06575863401643, 37.615544269790036 ,  127.06586598927537, 37.615303249258361 ,  127.06595954637508, 37.615093211085707,
             127.06800697390771, 37.615568234102611};

    final double[] wolgye2locat={127.05493672299355, 37.640761750913398 ,
             127.05887845545701, 37.637632010196377 ,  127.05958758015881, 37.636547419420999 ,  127.05861953901402, 37.636271173914622 ,
             127.05881676304288, 37.631771949014187 ,  127.05892780017521, 37.630722303381631 ,  127.0589553511313, 37.630592861306461 ,
             127.05904280171167, 37.630199955219503 ,  127.04998624978273, 37.624430946272589 ,  127.04824313840281, 37.626467509410261 ,
             127.0461649238287, 37.62809043681942 ,  127.04289314324956, 37.630435900571968 ,  127.04215639726722, 37.630875790882293 ,
             127.04196678533623, 37.630988902216799 ,  127.04148121127378, 37.631278861729861 ,  127.04290329750803, 37.632696119967889 ,
             127.04352858470871, 37.633079320421949 ,  127.04393582332892, 37.633436924142892 ,  127.04402538845939, 37.633617538094541 ,
             127.04491795072855, 37.635923819014074 ,  127.04492203841399, 37.635961064570189 ,  127.0450142656952, 37.636867301505873 ,
             127.04529596194857, 37.637486930965871 ,  127.04551142611903, 37.637829161087311 ,  127.04635477568512, 37.639156229310544 ,
             127.0479963370461, 37.641696416248998 ,  127.05059673257108, 37.645147206723301 ,  127.05124751543232, 37.645195877529311 ,
             127.05126119278462, 37.645159876060639 ,  127.05224743529143, 37.64278859882748 ,  127.05233289938472, 37.642596262208293 ,
             127.0526178710796, 37.642093720689402 ,  127.05289194205507, 37.641754504620799 ,  127.05320505510612, 37.641400789010433 ,
             127.05337536888982, 37.641234686352995 ,  127.05361813026067, 37.641035057400792 ,  127.05400952496252, 37.640740222733044 ,
             127.05413035751998, 37.640673079091471 ,  127.05419280216169, 37.640657604744852 ,  127.05427367024828, 37.640637567092782 ,
             127.05437139611449, 37.640643569626953 ,  127.05493672299355, 37.640761750913398};

    final double[] wolgye3locat={127.06439217268351, 37.630783164295835 ,
             127.0646905926653, 37.629288041129001 ,  127.06484409954571, 37.628873720461364 ,  127.06494029946013, 37.628614083605463 ,
             127.06535075413467, 37.628189713009547 ,  127.06715776752559, 37.626456768403365 ,  127.06825802986991, 37.625548191852381 ,
             127.07004587887576, 37.623552616157539 ,  127.07083139398441, 37.621570271332594 , 127.0711673369631, 37.61807654063481 ,
             127.07117662218592, 37.617321817494826 ,  127.07118668487894, 37.616434036419541 ,  127.07118706084962, 37.616368568783749 ,
             127.06800697390771, 37.615568234102611 ,  127.06595954637508, 37.615093211085707 ,  127.06586598927537, 37.615303249258361 ,
             127.06575863401643, 37.615544269790036 ,  127.06545605006346, 37.616224282260518 ,  127.06516733005691, 37.616877204639081 ,
             127.06512997331086, 37.616968327864235 ,  127.06507926548858, 37.617163056206394 ,  127.06508235969169, 37.617234895558326 ,
             127.06430279482919, 37.619033856299986 ,  127.06240635770386, 37.623356657403306 ,  127.06205729121993, 37.623403818462592 ,
             127.06165558751466, 37.624325065628085 ,  127.0607376442188, 37.626285411935996 ,  127.06016656001324, 37.627372814945488 ,
             127.05997213928985, 37.627796792596897 ,  127.05994345429558, 37.627859763213515 ,  127.0599118324496, 37.627930696124423 ,
             127.05962539990419, 37.628577465704417 ,  127.05931261026021, 37.629370603821123 ,  127.05921781493996, 37.629642229071493 ,
             127.05915800207111, 37.629814427437644 ,  127.05914108099465, 37.629870206730814 ,  127.05908544459702, 37.630054773520982 ,
             127.05904280171167, 37.630199955219503 ,  127.0589553511313, 37.630592861306461 ,  127.05892780017521, 37.630722303381631 ,
             127.05881676304288, 37.631771949014187 ,  127.05861953901402, 37.636271173914622 ,  127.05958758015881, 37.636547419420999 ,
             127.06027881027593, 37.635489797614142 ,  127.06049947577517, 37.635188671204382 ,  127.06087557576356, 37.63471348849469 ,
             127.06118047078438, 37.634421687613042 ,  127.06160262266577, 37.634066101241061 ,  127.06222467742296, 37.633543669170386 ,
             127.06228243372524, 37.633495139917358 ,  127.06289108779785, 37.632983640970615 ,  127.06358708756207, 37.632351544503024 ,
             127.06370224433282, 37.632238532280681 ,  127.0638627157962, 37.632052097572334 ,  127.06395315170474, 37.631909344143139 ,
             127.06401514261049, 37.631785639005564 ,  127.0641474210322, 37.631452631986562 ,  127.06439217268351, 37.630783164295835};

    final double[] gongreung1locat={127.07130302060848, 37.631084554957127 ,  127.0717324801668, 37.630915943342124 ,
             127.07210144967796, 37.63068180689676 ,  127.0731318314119, 37.629977987035531 ,  127.07400581398869, 37.62937274093585 ,
             127.07548723682861, 37.628191690604261 ,  127.0756288527236, 37.628073899058798 ,  127.07568305215317, 37.62802499795135 ,
             127.07572710200495, 37.627985244985368 ,  127.07575905814218, 37.627956141125409 ,  127.07580760481295, 37.627904413761016 ,
             127.07597365328903, 37.627724742449921 ,  127.0761048153487, 37.627577619175732 ,  127.07614973698118, 37.627525953454139 ,
             127.07620599105829, 37.627450370778973 ,  127.07623659669464, 37.627409154224047 ,  127.07639665107713, 37.627193405332484 ,
             127.07683318897813, 37.626534677300128 ,  127.07687148223722, 37.626458615259551 ,  127.07711399703416, 37.625976852600239 ,
             127.07719065501024, 37.625823899328282 ,  127.07724021508005, 37.625701269179601 ,  127.07732066971982, 37.625502135683597 ,
             127.07735013511169, 37.625427880584503 ,  127.07739344718024, 37.625283821128697 ,  127.0774468660148, 37.625105997551231 ,
             127.07751942823651, 37.624809846806826 ,  127.07753677496032, 37.624737896254139 ,  127.07754117751145, 37.624710871778234 ,
             127.07763296741129, 37.624134341926613 ,  127.07764765507632, 37.624042007008633 ,  127.0777269882151, 37.623539793098317 ,
             127.07775634274583, 37.623352698532841 ,  127.0777776914651, 37.623216618277688 ,  127.07779596894888, 37.623096597945867 ,
             127.07784828825461, 37.622756059999183 ,  127.07790708743747, 37.62237770686567 ,  127.0780576441305, 37.621849885136669 ,
             127.07814722651797, 37.621616931877753 ,  127.07831426571278, 37.621260372243576 ,  127.07851112682334, 37.621017686245757 ,
             127.07855594001779, 37.620976198904799 ,  127.07861718065439, 37.620920071127145 ,  127.07906204625198, 37.620526195149864 ,
             127.07930519426984, 37.620361440682423 ,  127.07954249220491, 37.620228211832888 ,  127.07964049808824, 37.620180113870688 ,
             127.07969798148737, 37.620152250841507 ,  127.07988975900666, 37.620059320384776 ,  127.08000738450126, 37.620012328507471 ,
             127.08016090955152, 37.619950997705345 ,  127.08032131929998, 37.619888475277811 ,  127.08079925866684, 37.619782013079742 ,
             127.08103234692838, 37.619766111989051 ,  127.08163723273077, 37.619250941769756 ,  127.0758492361736, 37.617078307374278 ,
             127.07140313714835, 37.615627975297897 ,  127.07118706084962, 37.616368568783749 ,  127.07118668487894, 37.616434036419541 ,
             127.07117662218592, 37.617321817494826 ,  127.0711673369631, 37.61807654063481 ,  127.07083139398441, 37.621570271332594 ,
             127.07004587887576, 37.623552616157539 ,  127.06825802986991, 37.625548191852381 ,  127.06715776752559, 37.626456768403365 ,
             127.06535075413467, 37.628189713009547 ,  127.06494029946013, 37.628614083605463 , 127.06484409954571, 37.628873720461364 ,
             127.0646905926653, 37.629288041129001 ,  127.06439217268351, 37.630783164295835 ,  127.07029744050607, 37.631403082840968 ,
             127.07130302060848, 37.631084554957127};

    final double[] gongreung2locat={127.11115471503085, 37.642411591637234 ,
            127.11134316814628, 37.642003229780585, 127.11195292820503, 37.640271212478737, 127.11238431664739, 37.63522852209713 ,
            127.11203734637901, 37.632618053963029 ,  127.11141717028131, 37.631330475285345 ,  127.11098324373879, 37.630593313858995 ,
            127.11091050602136, 37.630530309113034 ,  127.11084223615458, 37.630471179502955 ,  127.11041684451625, 37.630139659420131,
            127.10861728198641, 37.629141101615893 ,  127.10548870544851, 37.627260398775896 ,  127.10536971117268, 37.627139509498811 ,
            127.10526388508003, 37.626913756988849 ,  127.10352988456548, 37.623065973085239 ,  127.10352587901079, 37.623037107660011 ,
            127.10350738000311, 37.622903655855012 ,  127.10365769910781, 37.622470389852467 ,  127.10398152656327, 37.621772936713342 ,
            127.10403438359828, 37.621688613236081 ,  127.10406500435579, 37.621658295675239 ,  127.10423854630176, 37.621520296436522 ,
            127.10428592306728, 37.621494929304347 ,  127.10435147090202, 37.621459834501245 ,  127.10496349883175, 37.621171202037708 ,
            127.10501662115794, 37.621171379867128 ,  127.10510727955223, 37.621170556616761 ,  127.10524675867543, 37.621162636315425 ,
            127.10529674298417, 37.621154716674823 ,  127.10536513041018, 37.621131507794907 ,  127.10542308902302, 37.621112403869709 ,
            127.10550444954009, 37.621064850660488 ,  127.10562083587961, 37.621020172571413 ,  127.10565846113138, 37.621002271463233 ,
            127.10569629273546, 37.620953878610166 ,  127.10571920701126, 37.620899946724379 ,  127.10571036714282, 37.6208334323481 ,
            127.10502345145561, 37.620683551019908 ,  127.10182508083436, 37.619887507140618 ,  127.10155091758607, 37.61981460047555 ,
            127.10150753402296, 37.619803061004419 ,  127.10144688066455, 37.619755535668233 ,  127.10049900621004, 37.618881407934744 ,
            127.09704179579271, 37.617049900993493 ,  127.09695083464344, 37.617051468745096 , 127.09681553972896, 37.617053800724413 ,
            127.0961481577492, 37.617102219138886 ,  127.09304680692912, 37.618041355368078 ,  127.09260750546309, 37.618211093763335 ,
            127.09243574761318, 37.618279228043775 ,  127.08954300367121, 37.619643666786793 ,  127.08797308248711, 37.619887102103952 ,
            127.0857277524712, 37.620167842345843 ,  127.0841503734334, 37.619632688756226 ,  127.08244576618573, 37.619295492650657 ,
            127.08163723273077, 37.619250941769756 ,  127.08103234692838, 37.619766111989051 ,  127.08079925866684, 37.619782013079742 ,
            127.08032131929998, 37.619888475277811 ,  127.08016090955152, 37.619950997705345 ,  127.08000738450126, 37.620012328507471 ,
            127.07988975900666, 37.620059320384776 ,  127.07969798148737, 37.620152250841507 ,  127.07964049808824, 37.620180113870688 ,
            127.07954249220491, 37.620228211832888 ,  127.07930519426984, 37.620361440682423 ,  127.07906204625198, 37.620526195149864 ,
            127.07861718065439, 37.620920071127145 ,  127.07855594001779, 37.620976198904799 , 127.07851112682334, 37.621017686245757 ,
            127.07831426571278, 37.621260372243576 ,  127.07814722651797, 37.621616931877753 , 127.0780576441305, 37.621849885136669 ,
            127.07790708743747, 37.62237770686567 ,  127.07784828825461, 37.622756059999183 ,  127.07779596894888, 37.623096597945867 ,
            127.0777776914651, 37.623216618277688 ,  127.07775634274583, 37.623352698532841 ,  127.0777269882151, 37.623539793098317,
            127.07764765507632, 37.624042007008633 ,  127.07763296741129, 37.624134341926613 ,  127.07754117751145, 37.624710871778234,
            127.07753677496032, 37.624737896254139 ,  127.07751942823651, 37.624809846806826 ,  127.0774468660148, 37.625105997551231,
            127.07739344718024, 37.625283821128697 ,  127.07735013511169, 37.625427880584503 ,  127.07732066971982, 37.625502135683597,
            127.07724021508005, 37.625701269179601 ,  127.07719065501024, 37.625823899328282 ,  127.07711399703416, 37.625976852600239 ,
            127.07687148223722, 37.626458615259551 ,  127.07683318897813, 37.626534677300128 ,  127.07639665107713, 37.627193405332484 ,
            127.07623659669464, 37.627409154224047 ,  127.07620599105829, 37.627450370778973 ,  127.07614973698118, 37.627525953454139 ,
            127.0761048153487, 37.627577619175732 ,  127.07597365328903, 37.627724742449921 ,  127.07580760481295, 37.627904413761016 ,
            127.07575905814218, 37.627956141125409 ,  127.07572710200495, 37.627985244985368 ,  127.07568305215317, 37.62802499795135,
            127.0756288527236, 37.628073899058798 ,  127.07548723682861, 37.628191690604261 ,  127.07400581398869, 37.62937274093585 ,
            127.0731318314119, 37.629977987035531 ,  127.07210144967796, 37.63068180689676 ,  127.0717324801668, 37.630915943342124 ,
            127.07130302060848, 37.631084554957127 ,  127.07416893580863, 37.630825614413531 ,  127.07530950925234, 37.630760826855692,
            127.0766474283549, 37.634685509603692 ,  127.08033253423464, 37.636412346126924 ,  127.08040386431462, 37.636449780084718 ,
            127.08074711681542, 37.636631267343532,  127.08148645301412, 37.637427071037841 ,  127.08153996088735, 37.637485847896819 ,
            127.08158430985763, 37.637536705529904 ,  127.08305714756841, 37.640072436946205 ,  127.08570622916686, 37.640888460440948 ,
            127.08597228519135, 37.640942352600334 ,  127.08602612306458, 37.640944790364863 ,  127.08779907539689, 37.640987051705444 ,
            127.08793367927601, 37.640986395242571 ,  127.08801445653536, 37.640983297325938 ,  127.08831990558333, 37.640960703418671 ,
            127.08841068456734, 37.640936242339805 ,  127.0884789246891, 37.640900417809206 ,  127.08850874618054, 37.640888128412612 ,
            127.08865990983573, 37.6408402085722 ,  127.08872093224939, 37.64082239453186 ,  127.08917435632186, 37.640816087599902 ,
            127.0892572342984, 37.640816376168665 ,  127.09055848605614, 37.641096934426521 ,  127.09103091897418, 37.64125520776971 ,
            127.09413357070775, 37.642589737075284 ,  127.09461849433848, 37.643829618721952 ,  127.09445212499575, 37.645759079019868 ,
            127.0949337397759, 37.645512870937971 ,  127.0978142702977, 37.645281572982924 ,  127.10139076202796, 37.645381591039111 ,
            127.10395516759223, 37.645630303873489 ,  127.10656795572935, 37.64548959251487 ,  127.10742318432143, 37.645027260461397 ,
            127.10802800922103, 37.644638824979502 ,  127.10806551500767, 37.644518975940407 ,  127.10821616338016, 37.644158354786889 ,
            127.10906868894347, 37.643026622001457 ,  127.10918190162181, 37.642918835462709 ,  127.1095597169287, 37.642605745205145 ,
            127.10959030873562, 37.642582186282361 ,  127.10964398306163, 37.642549325290645 ,  127.1097032964396, 37.642514959665959 ,
            127.10974875942422, 37.642491448996715 ,  127.11115471503085, 37.642411591637234 };

    final double [] hagye1locat={127.07649680293606, 37.645996770949068, 127.07821352005462, 37.644351218959777 , 127.07832834873444, 37.644292636849393,
             127.07912366391122, 37.643886900137737 ,  127.07958896653287, 37.644165720743047 , 127.07994029476782, 37.644177112256045 ,
             127.08069160846905, 37.643862063180059 ,  127.0809093411108, 37.643680374390442 , 127.08194148122344, 37.642187755677902 ,
             127.08309286666896, 37.640507452065116 ,  127.08305714756841, 37.640072436946205 ,  127.08158430985763, 37.637536705529904 ,
             127.08153996088735, 37.637485847896819 ,  127.08148645301412, 37.637427071037841 ,  127.08074711681542, 37.636631267343532 ,
             127.08040386431462, 37.636449780084718 ,  127.08033253423464, 37.636412346126924 ,  127.0766474283549, 37.634685509603692 ,
             127.07530950925234, 37.630760826855692 ,  127.07416893580863, 37.630825614413531 ,  127.07130302060848, 37.631084554957127 ,
             127.07029744050607, 37.631403082840968 ,  127.06940112320136, 37.633293760955638 ,  127.06875110043978, 37.63421371239869 ,
             127.06679743623283, 37.638683286216114 ,  127.06935800608383, 37.63939107808168 ,  127.07185453950424, 37.64309798522244 ,
             127.07120869529139, 37.644409340043346 ,  127.07076642660789, 37.645305689734528 ,  127.07288763821455, 37.645910524842897 ,
             127.07420594232674, 37.646286008779882 ,  127.07424245157573, 37.64624118361381 ,  127.07464967182668, 37.645402001654567 ,
             127.07604429934304, 37.644463311634581 ,  127.07649680293606, 37.645996770949068};

    final double [] hagye2locat={127.06679743623283, 37.638683286216114 , 127.06875110043978, 37.63421371239869, 127.06940112320136, 37.633293760955638,
             127.07029744050607, 37.631403082840968 ,  127.06439217268351, 37.630783164295835 ,  127.0641474210322, 37.631452631986562 ,
             127.06401514261049, 37.631785639005564 ,  127.06395315170474, 37.631909344143139 ,  127.0638627157962, 37.632052097572334 ,
             127.06370224433282, 37.632238532280681 ,  127.06358708756207, 37.632351544503024 ,  127.06289108779785, 37.632983640970615 ,
             127.06228243372524, 37.633495139917358 ,  127.06222467742296, 37.633543669170386 , 127.06160262266577, 37.634066101241061 ,
             127.06118047078438, 37.634421687613042 ,  127.06087557576356, 37.63471348849469 ,  127.06049947577517, 37.635188671204382 ,
             127.06027881027593, 37.635489797614142 ,  127.05958758015881, 37.636547419420999 ,  127.05887845545701, 37.637632010196377 ,
             127.06012820373506, 37.639530642012645 ,  127.06135560363346, 37.637178075892464 ,  127.06679743623283, 37.638683286216114};

    final double[] joongyebonlocat={127.09445212499575, 37.645759079019868 ,  127.09461849433848, 37.643829618721952 ,
             127.09413357070775, 37.642589737075284 ,  127.09103091897418, 37.64125520776971 ,  127.09055848605614, 37.641096934426521 ,
             127.0892572342984, 37.640816376168665 ,  127.08917435632186, 37.640816087599902 ,  127.08872093224939, 37.64082239453186 ,
             127.08865990983573, 37.6408402085722 ,  127.08850874618054, 37.640888128412612 ,  127.0884789246891, 37.640900417809206 ,
             127.08841068456734, 37.640936242339805 ,  127.08831990558333, 37.640960703418671 , 127.08801445653536, 37.640983297325938 ,
             127.08793367927601, 37.640986395242571 ,  127.08779907539689, 37.640987051705444 ,  127.08602612306458, 37.640944790364863 ,
             127.08597228519135, 37.640942352600334 ,  127.08570622916686, 37.640888460440948 ,  127.08305714756841, 37.640072436946205 ,
             127.08309286666896, 37.640507452065116 ,  127.08194148122344, 37.642187755677902 ,  127.0809093411108, 37.643680374390442 ,
             127.08069160846905, 37.643862063180059 ,  127.07994029476782, 37.644177112256045 ,  127.07958896653287, 37.644165720743047 ,
             127.07912366391122, 37.643886900137737 ,  127.07832834873444, 37.644292636849393 ,  127.07821352005462, 37.644351218959777 ,
             127.07649680293606, 37.645996770949068 ,  127.07671468466486, 37.650172998883953 ,  127.07805836066194, 37.6527432435702 ,
             127.07810562196757, 37.652842559677801 ,  127.07813245667423, 37.652921522634969 ,  127.07816345493983, 37.653077114117501 ,
             127.07817084173858, 37.653146075685079 ,  127.07817276242764, 37.653185307836615 ,  127.07817355146337, 37.653224185321172 ,
             127.07817442842165, 37.653267560791257 ,  127.0781746724048, 37.653348681988675 ,  127.07817354126411, 37.653433208025334 ,
             127.08603443399842, 37.655912672255972 ,  127.0863414045695, 37.655502505170567 ,  127.08657643377425, 37.655412068751531 ,
             127.08921128152483, 37.654950325066068 ,  127.09062160592454, 37.654895513374953 ,  127.09281808479378, 37.654903116436039 ,
             127.0936018870392, 37.653317212385879 ,  127.09229791715144, 37.64999466384976 ,  127.09229248324398, 37.64995183152142 ,
             127.09229618018492, 37.649922550817429 ,  127.09233657129447, 37.649731660851224 ,  127.09236527862089, 37.64959605461469 ,
             127.09244721023394, 37.649252702600727 ,  127.09255415210799, 37.648880002796481 ,  127.09257928177296, 37.648811503169625 ,
             127.09348121730697, 37.64698715140819 ,  127.09394034765135, 37.646330754681017 ,  127.09445212499575, 37.645759079019868};

    final double[] joongye1locat={127.07817354126411, 37.653433208025334 ,  127.0781746724048, 37.653348681988675 ,
             127.07817442842165, 37.653267560791257 ,  127.07817355146337, 37.653224185321172 ,  127.07817276242764, 37.653185307836615 ,
             127.07817084173858, 37.653146075685079 ,  127.07816345493983, 37.653077114117501 ,  127.07813245667423, 37.652921522634969 ,
             127.07810562196757, 37.652842559677801 ,  127.07805836066194, 37.6527432435702 ,  127.07671468466486, 37.650172998883953 ,
             127.07649680293606, 37.645996770949068 ,  127.07604429934304, 37.644463311634581 ,  127.07464967182668, 37.645402001654567,
             127.07424245157573, 37.64624118361381 ,  127.07420594232674, 37.646286008779882 ,  127.07288763821455, 37.645910524842897,
             127.07076642660789, 37.645305689734528 ,  127.06859972340787, 37.650483957124997 ,  127.0687727153406, 37.650623854307192,
             127.06967507311403, 37.651353581977716 ,  127.06973865259597, 37.651409633687464 ,  127.07019252743329, 37.651820378038003,
             127.07037865293117, 37.651988821874262 ,  127.0706020673647, 37.652191282405575 ,  127.07070821571548, 37.652307562634455 ,
             127.07084523735057, 37.652457674097668 ,  127.07100159115741, 37.652628965013491 ,  127.07106161386677, 37.652694728492925 ,
             127.07139841975086, 37.653063995538425 ,  127.07144507187745, 37.653154375320426 ,  127.07168221233354, 37.653615968380727 ,
             127.0719140436382, 37.654068419240971 ,  127.07200986584618, 37.654550041024905 ,  127.07207939857737, 37.654902941202927 ,
             127.07212964068529, 37.655162257692886 ,  127.07421617857715, 37.65469322571132 ,  127.07817354126411, 37.653433208025334 };

    final double[] joongye23locat={127.07076642660789, 37.645305689734528 ,  127.07120869529139, 37.644409340043346 ,
             127.07185453950424, 37.64309798522244 ,  127.06935800608383, 37.63939107808168 ,  127.06679743623283, 37.638683286216114 ,
             127.06135560363346, 37.637178075892464 ,  127.06012820373506, 37.639530642012645 ,  127.060306689226, 37.640015749721009 ,
             127.0608407858544, 37.641467767063276 ,  127.06089304013888, 37.641737236350842 ,  127.06101819783542, 37.643342083870763 ,
             127.06103423685316, 37.643866046206107 ,  127.06105661977895, 37.644155684268718 ,  127.06107115792121, 37.644333752575974 ,
             127.06110260404108, 37.644649337787619 ,  127.06113822912617, 37.644749825261407 ,  127.06119180649921, 37.644900917504046 ,
             127.0612528257349, 37.645004798287253 ,  127.06132661511776, 37.645107599850547 ,  127.06138175426454, 37.645180191295871 ,
             127.06140042649167, 37.645204768087758 ,  127.06145394404723, 37.645262066783033 ,  127.06149125212654, 37.645301999521031 ,
             127.06576777249313, 37.649275816100001 ,  127.06583534678268, 37.649320545804052 ,  127.06592198922463, 37.649377784086688 ,
             127.06617382034995, 37.649507150998708 ,  127.0674135932304, 37.650014199158605 ,  127.06859972340787, 37.650483957124997 ,
             127.07076642660789, 37.645305689734528};

    final double[] joongye4locat={127.09396031613478, 37.662570667849479 ,  127.09244495585239, 37.65809256043152 ,
             127.09022943042645, 37.657278188658012 ,  127.08844516624934, 37.656622978558119 ,  127.08603443399842, 37.655912672255972 ,
             127.07817354126411, 37.653433208025334 ,  127.07421617857715, 37.65469322571132 ,  127.07212964068529, 37.655162257692886 ,
             127.07160819875661, 37.658358982109505 ,  127.07441053210903, 37.661493428155907 ,  127.07481206600063, 37.661857833232894 ,
             127.07499630647344, 37.662025027960809 ,  127.07526506478779, 37.662267184379637 ,  127.07585974035869, 37.662590343835838 ,
             127.07753098901415, 37.662410441871891 ,  127.07766729771348, 37.662365862317145 ,  127.07824401386647, 37.662009644905645 ,
             127.078470893823, 37.661861735524909 ,  127.07852910257682, 37.661843917714165 ,  127.07878942124719, 37.661799789805599 ,
             127.07960086074679, 37.661913089197213 ,  127.08321328464994, 37.662443050052154 ,  127.08583055702736, 37.66302349046191 ,
             127.08880366596046, 37.663721160809743 ,  127.09061706333732, 37.663335389244949 ,  127.09074932063011, 37.663125160950386,
             127.09396031613478, 37.662570667849479};

    final double[] sangye1locat= {127.08176430131853, 37.696377610934753 ,  127.08286182410872, 37.695099363821065 ,
             127.08348841774323, 37.694611479187863 ,  127.08376676034781, 37.694659781864239 ,  127.08428931674722, 37.694010392015052 ,
             127.08513534546033, 37.691416433663321 ,  127.08513978879152, 37.690999583535088 ,  127.08501656851745, 37.690850430299498 ,
             127.08492587944606, 37.690843350239724 ,  127.08363896869379, 37.69012676170825 ,  127.08011477811777, 37.688552709367343 ,
             127.07917660864658, 37.688478385392003 ,  127.07853020540004, 37.687837258139005 ,  127.07695326333211, 37.686164147911654 ,
             127.07596628253151, 37.684341039225259 ,  127.07520491023573, 37.682243828295768 ,  127.07384255237248, 37.677658897225314 ,
             127.07380429642691, 37.677287078045424 ,  127.07362499345118, 37.676788443377113 ,  127.07132178162021, 37.674771246832606 ,
             127.07121357884095, 37.674709734081837 ,  127.0711522380054, 37.67467486379887 ,  127.07098268834348, 37.674579607165789 ,
             127.07053468700259, 37.674347009997199 ,  127.06905341826717, 37.673875198406542 ,  127.06877052228467, 37.673999192887791 ,
             127.06770533952113, 37.674236400204009 ,  127.06692738145814, 37.673951879496911 ,  127.06667830708722, 37.673847924222315 ,
             127.06655971251999, 37.67379842345931 ,  127.06539315211811, 37.67331304925947 ,  127.06335674714008, 37.672625021009665 ,
             127.06270884086332, 37.67240630055916 ,  127.05981237582793, 37.672267086055641 ,  127.05826110914658, 37.671297986091588 ,
             127.05623733675921, 37.670519758848734 ,  127.04893293355563, 37.671202992594871 ,  127.04893276990003, 37.67123003016593 ,
             127.04897294494612, 37.671852081226895 ,  127.04899979278943, 37.672100050522729 ,  127.0490582101511, 37.67263656710896 ,
             127.04908141986853, 37.672783122473675 ,  127.04913536385273, 37.673120201929251 ,  127.05093991377851, 37.680154100336601 ,
             127.05149227339437, 37.682003932625207 ,  127.05182431673553, 37.682422060855352 ,  127.05186089640037, 37.682468393110376 ,
             127.05200642831706, 37.68366335462887 ,  127.05202117435238, 37.68387038339776 ,  127.05191590832813, 37.684811480933782 ,
             127.05143827696199, 37.685791572755925 ,  127.0511820480647, 37.686316749929667 ,  127.05106999759037, 37.686511623851082 ,
             127.05094410119075, 37.686730474420969 ,  127.05077658612298, 37.687021624314461 ,  127.05293620310739, 37.688130580623586 ,
             127.05462916889147, 37.689285056640323 , 127.05482232424197, 37.689347752455859 ,  127.05682643317415, 37.689568241313815 ,
             127.05755262797123, 37.689399715301022 ,  127.05816205040975, 37.689154918382009 ,  127.05884902614787, 37.688944893357359 ,
             127.06038027346888, 37.688692605626706 ,  127.06179634903864, 37.688977288710952 ,  127.06451166037573, 37.689644160687862 ,
             127.06511165553488, 37.689846952566072 ,  127.06534795599408, 37.690049496563937 ,  127.06547376707218, 37.690233606392773 ,
             127.06563541514588, 37.690473054607999 ,  127.06566090834052, 37.690604075832276 ,  127.06826010646853, 37.693466097931946 ,
             127.06836678406361, 37.693580513975554 ,  127.06881247345542, 37.694058490452264 ,  127.06939271852256, 37.694365936411728 ,
             127.06994446460637, 37.694260799736945 ,  127.07043013842566, 37.694076787730246 ,  127.07103809928952, 37.694128574043098 ,
             127.07199583664089, 37.694255987045509 ,  127.07262766395625, 37.694349538326868 ,  127.0728313983398, 37.694425762958325 ,
             127.07291557266456, 37.694457614416585 ,  127.07446414228079, 37.695476966249387 ,  127.07594478128354, 37.695961375234852,
             127.07734112258754, 37.696384380359255 ,  127.08176430131853, 37.696377610934753};

    final double[] sangye2locat={127.07160819875661, 37.658358982109505 ,  127.07212964068529, 37.655162257692886 ,
             127.07207939857737, 37.654902941202927 ,  127.07200986584618, 37.654550041024905 ,  127.0719140436382, 37.654068419240971 ,
             127.07168221233354, 37.653615968380727 ,  127.07144507187745, 37.653154375320426 ,  127.07139841975086, 37.653063995538425 ,
             127.07106161386677, 37.652694728492925 ,  127.07100159115741, 37.652628965013491 ,  127.07084523735057, 37.652457674097668,
             127.07070821571548, 37.652307562634455 ,  127.0706020673647, 37.652191282405575 ,  127.07037865293117, 37.651988821874262 ,
             127.07019252743329, 37.651820378038003 , 127.06973865259597, 37.651409633687464 ,  127.06967507311403, 37.651353581977716 ,
             127.0687727153406, 37.650623854307192 ,  127.06859972340787, 37.650483957124997 ,  127.06740414123588, 37.654574927677359 ,
             127.0673477510483, 37.6547685081986 ,  127.06709606492576, 37.655625192818448 ,  127.06701479302201, 37.655752964501531 ,
             127.06640466147948, 37.65562244163894 ,  127.06499072904265, 37.655318668350958 ,  127.06445301260911, 37.655187127031986 ,
             127.06235776096045, 37.654708415084045 ,  127.06077704937725, 37.654362724612241 ,  127.06043159847486, 37.655706374704941 ,
             127.06081678759918, 37.655769645581358 ,  127.06106452690625, 37.655813380234633 ,  127.0613468451825, 37.655882030600502 ,
             127.06171610395859, 37.65597348176663 ,  127.0615838009594, 37.657397154972081 ,  127.06260083644155, 37.6589286946 ,
             127.06289116139175, 37.658962444200888 ,  127.06466046097144, 37.659215727880245 ,  127.0652120887882, 37.659400282898659 ,
             127.06529605554007, 37.659734573259101 ,  127.06532566205856, 37.659852495934629 ,  127.06550470850341, 37.660620417433293 ,
             127.06568508673311, 37.661396230157663 ,  127.06572177245222, 37.661554098910408 ,  127.06805463145827, 37.660315441729502 ,
             127.07160819875661, 37.658358982109505};

    final double[] sangye34locat={127.0959236405964, 37.68771674545949 ,  127.09632169639002, 37.685946990614745 ,
            127.09629415772262, 37.685789451584029 ,  127.09628522507205, 37.685738401077643 ,  127.09585536591162, 37.684752254443325 ,
            127.09563299178052, 37.684322232478898 ,  127.09552628469595, 37.684263279925922 ,  127.09539837323904, 37.684192987871207 ,
            127.0950627924164, 37.68410054460098 ,  127.09498572582675, 37.684081158183467 ,  127.09467357148607, 37.684001219128987 ,
            127.09428119647858, 37.683551456858972 ,  127.09281142909215, 37.681804565526235 ,  127.09279669609001, 37.681779867705728 ,
            127.09269851446707, 37.681583349022382 ,  127.09182776444449, 37.679187298896522 ,  127.09183852615071, 37.679013513992857 ,
            127.09184409044386, 37.678923770354558 ,  127.09192782452935, 37.678387711705504 ,  127.09204096439014, 37.677918283000132 ,
            127.09227021681814, 37.677481892908304 ,  127.092464327705, 37.677359793148995 ,  127.09278912549966, 37.677383561035363 ,
            127.09298142284769, 37.67728496544887 ,  127.09361088871749, 37.676622402429246 ,  127.09556154288181, 37.67280745073942 ,
            127.09563425948294, 37.672599266464076,  127.09573883202989, 37.672265004489617 ,  127.09574784263464, 37.672002422528664 ,
            127.09572830788656, 37.670417231369676 ,  127.09440904337039, 37.664364743362569 ,  127.09396031613478, 37.662570667849479 ,
            127.09074932063011, 37.663125160950386 ,  127.09061706333732, 37.663335389244949 ,  127.08880366596046, 37.663721160809743 ,
            127.08583055702736, 37.66302349046191 ,  127.08321328464994, 37.662443050052154 ,  127.07960086074679, 37.661913089197213 ,
            127.07878942124719, 37.661799789805599 ,  127.07852910257682, 37.661843917714165 ,  127.078470893823, 37.661861735524909 ,
            127.07824401386647, 37.662009644905645 ,  127.07766729771348, 37.662365862317145 ,  127.07753098901415, 37.662410441871891 ,
            127.07585974035869, 37.662590343835838 ,  127.07526506478779, 37.662267184379637,  127.07499630647344, 37.662025027960809 ,
            127.07481206600063, 37.661857833232894 ,  127.07441053210903, 37.661493428155907 ,  127.0736300650422, 37.662771585791567 ,
            127.07248865434816, 37.663775255411871 ,  127.07205323940224, 37.664028871515136 ,  127.07140122864509, 37.664441762749796 ,
            127.07133124397939, 37.664501704091158 ,  127.07129720893458, 37.664531806665458 ,  127.07121850910735, 37.664635367917604 ,
            127.07106893360756, 37.664867873262537 ,  127.07101612453839, 37.664944409153946 , 127.07089835040163, 37.665101771159861 ,
            127.0708054232539, 37.665241139974135 ,  127.07075080118811, 37.665373888104575 ,  127.07073977499373, 37.66544370143086 ,
            127.070726162383, 37.665594445212342 ,  127.07076839967687, 37.665886586340541 ,  127.07084765333748, 37.66615389515249 ,
            127.07094144059418, 37.666479843525892 ,  127.07094858313319, 37.66662968034948 ,  127.07095880732977, 37.666848890587943 ,
            127.07094208340605, 37.66735301381086 ,  127.07011791825238, 37.6679528930581 ,  127.06627571893824, 37.670478223436106 ,
            127.06655971251999, 37.67379842345931 ,  127.06667830708722, 37.673847924222315 ,  127.06692738145814, 37.673951879496911 ,
            127.06770533952113, 37.674236400204009 ,  127.06877052228467, 37.673999192887791 ,  127.06905341826717, 37.673875198406542 ,
            127.07053468700259, 37.674347009997199 ,  127.07098268834348, 37.674579607165789 ,  127.0711522380054, 37.67467486379887 ,
            127.07121357884095, 37.674709734081837 ,  127.07132178162021, 37.674771246832606 ,  127.07362499345118, 37.676788443377113 ,
            127.07380429642691, 37.677287078045424 ,  127.07384255237248, 37.677658897225314 ,  127.07520491023573, 37.682243828295768 ,
            127.07596628253151, 37.684341039225259 ,  127.07695326333211, 37.686164147911654 ,  127.07853020540004, 37.687837258139005 ,
            127.07917660864658, 37.688478385392003 ,  127.08011477811777, 37.688552709367343 ,  127.08363896869379, 37.69012676170825 ,
            127.08492587944606, 37.690843350239724 ,  127.08583259641074, 37.690452205696879 ,  127.0862360158047, 37.690313915469318 ,
            127.0889917161366, 37.689755713182386 ,  127.08940776784077, 37.689768429155464 ,  127.08959209895657, 37.689812010251416 ,
            127.08992528426496, 37.689890783006383 ,  127.09220027120504, 37.689730799002945 ,  127.09232655094505, 37.68972096945145 ,
            127.09240806901907, 37.689714617429829 ,  127.09283501347736, 37.689678912374525,  127.09495169526966, 37.689166809112514 ,
            127.0953075056197, 37.689044097540148 ,  127.09550297770552, 37.688970489410785 ,  127.09558027313277, 37.688941380102143 ,
            127.09579195526719, 37.688860985970543 ,  127.0959236405964, 37.68771674545949};

    final double[] sangye5locat={127.07011791825238, 37.6679528930581 ,  127.07094208340605, 37.66735301381086 ,
             127.07095880732977, 37.666848890587943 ,  127.07094858313319, 37.66662968034948 ,  127.07094144059418, 37.666479843525892 ,
             127.07084765333748, 37.66615389515249 ,  127.07076839967687, 37.665886586340541 ,  127.070726162383, 37.665594445212342 ,
             127.07073977499373, 37.66544370143086 ,  127.07075080118811, 37.665373888104575 ,  127.0708054232539, 37.665241139974135 ,
             127.07089835040163, 37.665101771159861 ,  127.07101612453839, 37.664944409153946 ,  127.07106893360756, 37.664867873262537 ,
             127.07121850910735, 37.664635367917604 ,  127.07129720893458, 37.664531806665458 ,  127.07133124397939, 37.664501704091158 ,
             127.07140122864509, 37.664441762749796 ,  127.07205323940224, 37.664028871515136 ,  127.07248865434816, 37.663775255411871 ,
             127.0736300650422, 37.662771585791567 ,  127.07441053210903, 37.661493428155907 ,  127.07160819875661, 37.658358982109505 ,
             127.06805463145827, 37.660315441729502 ,  127.06572177245222, 37.661554098910408 ,  127.06670032055492, 37.667780288157559 ,
             127.0667204345562, 37.667840936224295 ,  127.06856950370356, 37.66805636856617 ,  127.06913003699657, 37.667990303686487 ,
             127.06935947933169, 37.667837139612026 ,  127.07011791825238, 37.6679528930581};

    final double[] sangye67locat={127.06859972340787, 37.650483957124997 ,  127.0674135932304, 37.650014199158605 ,
             127.06617382034995, 37.649507150998708 ,  127.06592198922463, 37.649377784086688 ,  127.06583534678268, 37.649320545804052 ,
             127.06576777249313, 37.649275816100001 ,  127.06149125212654, 37.645301999521031 ,  127.06145394404723, 37.645262066783033,
             127.06140042649167, 37.645204768087758 ,  127.06138175426454, 37.645180191295871 ,  127.06132661511776, 37.645107599850547 ,
             127.0612528257349, 37.645004798287253 ,  127.06119180649921, 37.644900917504046 ,  127.06113822912617, 37.644749825261407 ,
             127.06110260404108, 37.644649337787619 ,  127.06107115792121, 37.644333752575974 ,  127.06105661977895, 37.644155684268718 ,
             127.06103423685316, 37.643866046206107 ,  127.06101819783542, 37.643342083870763 ,  127.06089304013888, 37.641737236350842 ,
             127.0608407858544, 37.641467767063276 ,  127.060306689226, 37.640015749721009 ,  127.06012820373506, 37.639530642012645 ,
             127.05887845545701, 37.637632010196377 ,  127.05493672299355, 37.640761750913398 ,  127.0550725023237, 37.641632054301787 ,
             127.05573212737849, 37.645306364789242 ,  127.05589253601269, 37.645970578436369 ,  127.05557828059381, 37.647108460002144 ,
             127.05547201349343, 37.64746521447897 ,  127.05532454409209, 37.64795814076875 ,  127.05521177836103, 37.648334023868955 ,
             127.0550447150647, 37.648665761873204 ,  127.05482463543358, 37.649097573293474 ,  127.05463347318276, 37.649472150392327 ,
             127.05453357964583, 37.649667696802283 ,  127.05443032900645, 37.65011008854237 ,  127.05440825519906, 37.650205348562942 ,
             127.05436123252218, 37.650408395318749 ,  127.0542922305815, 37.650929783202507 ,  127.05423796469262, 37.651948088404282 ,
             127.05423470893189, 37.652039489640686 ,  127.05423115172022, 37.652139596646016 ,  127.05421812074263, 37.652540642084418 ,
             127.05420887044569, 37.653021696275715 ,  127.05418174435076, 37.654481560022823 ,  127.06043159847486, 37.655706374704941 ,
             127.06077704937725, 37.654362724612241 ,  127.06235776096045, 37.654708415084045 ,  127.06445301260911, 37.655187127031986 ,
             127.06499072904265, 37.655318668350958 ,  127.06640466147948, 37.65562244163894 ,  127.06701479302201, 37.655752964501531 ,
             127.06709606492576, 37.655625192818448,  127.0673477510483, 37.6547685081986 , 127.06740414123588, 37.654574927677359,
             127.06859972340787, 37.650483957124997};

    final double[] sangye8locat={127.05623733675921, 37.670519758848734 ,  127.05768014681657, 37.664190944332177 ,
             127.05802528532179, 37.663739416536089 , 127.05869483857343, 37.661210514319599 ,  127.05870156450473, 37.661184409776745 ,
             127.05277888586942, 37.661671357442188 ,  127.0514706872939, 37.661804970487971 ,  127.05132493167544, 37.663652152269428 ,
             127.05126629549312, 37.663975282972864 ,  127.05112650896835, 37.664358944911356 ,  127.05104796683084, 37.664573839582737 ,
             127.05084725595877, 37.664953889235342 ,  127.0506083921243, 37.665314639808734 ,  127.05006220606546, 37.666105731694223 ,
             127.04979149207374, 37.666459599017436 ,  127.04975791456047, 37.666503410885937 ,  127.04971666841236, 37.666557216303993 ,
             127.04966577631807, 37.666623612569239 ,  127.04928777531804, 37.66737252929412 ,  127.04927698763093, 37.667399528088964 ,
             127.0490133991119, 37.668069209370415 ,  127.04888687410768, 37.668743277392117 ,  127.04882305564779, 37.669093427654843 ,
             127.04893293355563, 37.671202992594871 ,  127.05623733675921, 37.670519758848734};

    final double[] sangye9locat={127.07011791825238, 37.6679528930581 ,  127.06935947933169, 37.667837139612026 ,
             127.06913003699657, 37.667990303686487 ,  127.06856950370356, 37.66805636856617 ,  127.0667204345562, 37.667840936224295 ,
             127.06670032055492, 37.667780288157559 ,  127.06572177245222, 37.661554098910408 ,  127.06568508673311, 37.661396230157663 ,
             127.06423320650813, 37.661392002079182 ,  127.06353718387659, 37.661390627484138 , 127.06292724858376, 37.661389423585433 ,
             127.06294992463322, 37.66156921582656 ,  127.06299871354985, 37.661889929413448 ,  127.06305292447897, 37.661952060980703 ,
             127.06313532345723, 37.662400816469798 ,  127.06320466924782, 37.662779634014349 ,  127.06342744344178, 37.664795589417913 ,
             127.06333030322899, 37.664829824868193 ,  127.06315616243479, 37.664890831353638 ,  127.06262786151576, 37.665072520526252 ,
             127.0625090159169, 37.665104744151435 ,  127.062426987994, 37.665126982257874 ,  127.06221774099387, 37.665161132538401 ,
             127.06187456911368, 37.665192531732458 ,  127.06161957932125, 37.665171304286964 ,  127.06110701110116, 37.665087151384313 ,
             127.05803908436664, 37.664582657819864 ,  127.05802528532179, 37.663739416536089 ,  127.05768014681657, 37.664190944332177 ,
             127.05623733675921, 37.670519758848734 ,  127.05826110914658, 37.671297986091588 ,  127.05981237582793, 37.672267086055641 ,
             127.06270884086332, 37.67240630055916 ,  127.06335674714008, 37.672625021009665 ,  127.06539315211811, 37.67331304925947 ,
             127.06655971251999, 37.67379842345931 ,  127.06627571893824, 37.670478223436106 ,  127.07011791825238, 37.6679528930581};

    final double[] sangye10locat={127.06568508673311, 37.661396230157663 ,  127.06550470850341, 37.660620417433293 ,
             127.06532566205856, 37.659852495934629 ,  127.06529605554007, 37.659734573259101 ,  127.0652120887882, 37.659400282898659 ,
             127.06466046097144, 37.659215727880245 ,  127.06289116139175, 37.658962444200888 ,  127.06260083644155, 37.6589286946 ,
             127.0615838009594, 37.657397154972081 ,  127.06171610395859, 37.65597348176663 ,  127.0613468451825, 37.655882030600502 ,
             127.06106452690625, 37.655813380234633 ,  127.06081678759918, 37.655769645581358 ,  127.06043159847486, 37.655706374704941 ,
             127.05418174435076, 37.654481560022823 ,  127.05243502430869, 37.658161607043574 ,  127.05155124511816, 37.660657210438465 ,
             127.0514706872939, 37.661804970487971 ,  127.05277888586942, 37.661671357442188 ,  127.05870156450473, 37.661184409776745 ,
             127.05869483857343, 37.661210514319599,  127.05802528532179, 37.663739416536089 ,  127.05803908436664, 37.664582657819864 ,
             127.06110701110116, 37.665087151384313 ,  127.06161957932125, 37.665171304286964 ,  127.06187456911368, 37.665192531732458 ,
             127.06221774099387, 37.665161132538401 ,  127.062426987994, 37.665126982257874 ,  127.0625090159169, 37.665104744151435 ,
             127.06262786151576, 37.665072520526252 ,  127.06315616243479, 37.664890831353638 ,  127.06333030322899, 37.664829824868193 ,
             127.06342744344178, 37.664795589417913 ,  127.06320466924782, 37.662779634014349 ,  127.06313532345723, 37.662400816469798 ,
             127.06305292447897, 37.661952060980703 ,  127.06299871354985, 37.661889929413448 ,  127.06294992463322, 37.66156921582656 ,
             127.06292724858376, 37.661389423585433 ,  127.06353718387659, 37.661390627484138 ,  127.06423320650813, 37.661392002079182 ,
             127.06568508673311, 37.661396230157663};



    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        if (USE_XML_LAYOUT) {
            setContentView(R.layout.mapview);

            mMapView = (NMapView)findViewById(R.id.mapView);
        } else {
            // create map view
            mMapView = new NMapView(this);

            // create parent view to rotate map view
            mMapContainerView = new MapContainerView(this);
            mMapContainerView.addView(mMapView);

            // set the activity content to the parent view
            setContentView(mMapContainerView);
        }

        // set a registered Client Id for Open MapViewer Library
        mMapView.setClientId(CLIENT_ID);

        // initialize map view
        mMapView.setClickable(true);
        mMapView.setEnabled(true);
        mMapView.setFocusable(true);
        mMapView.setFocusableInTouchMode(true);
        mMapView.requestFocus();

        // register listener for map state changes
        mMapView.setOnMapStateChangeListener(onMapViewStateChangeListener);
        mMapView.setOnMapViewTouchEventListener(onMapViewTouchEventListener);
        mMapView.setOnMapViewDelegate(onMapViewTouchDelegate);

        // use map controller to zoom in/out, pan and set map center, zoom level etc.
        mMapController = mMapView.getMapController();

        // use built in zoom controls
        NMapView.LayoutParams lp = new NMapView.LayoutParams(LayoutParams.WRAP_CONTENT,
                LayoutParams.WRAP_CONTENT, NMapView.LayoutParams.BOTTOM_RIGHT);
        mMapView.setBuiltInZoomControls(true, lp);

        // create resource provider
        mMapViewerResourceProvider = new NMapViewerResourceProvider(this);

        // set data provider listener
        super.setMapDataProviderListener(onDataProviderListener);

        // create overlay manager
        mOverlayManager = new NMapOverlayManager(this, mMapView, mMapViewerResourceProvider);
        // register callout overlay listener to customize it.
        mOverlayManager.setOnCalloutOverlayListener(onCalloutOverlayListener);
        // register callout overlay view listener to customize it.
        mOverlayManager.setOnCalloutOverlayViewListener(onCalloutOverlayViewListener);

        // location manager
        mMapLocationManager = new NMapLocationManager(this);
        mMapLocationManager.setOnLocationChangeListener(onMyLocationChangeListener);

        // compass manager
        mMapCompassManager = new NMapCompassManager(this);

        // create my location overlay
        mMyLocationOverlay = mOverlayManager.createMyLocationOverlay(mMapLocationManager, mMapCompassManager);

        timer=new Timer();
        testPathDataOverlay();
    }

    @Override
    protected void onStart() {
        super.onStart();
    }

    @Override
    protected void onResume() {
        super.onResume();
    }

    @Override
    protected void onStop() {

        stopMyLocation();

        super.onStop();
    }

    @Override
    protected void onDestroy() {

        // save map view state such as map center position and zoom level.
        saveInstanceState();

        super.onDestroy();
    }

	/* Test Functions */

    private void startMyLocation() {

        if (mMyLocationOverlay != null) {
            if (!mOverlayManager.hasOverlay(mMyLocationOverlay)) {
                mOverlayManager.addOverlay(mMyLocationOverlay);
            }

            if (mMapLocationManager.isMyLocationEnabled()) {

                if (!mMapView.isAutoRotateEnabled()) {
                    mMyLocationOverlay.setCompassHeadingVisible(true);

                    mMapCompassManager.enableCompass();

                    mMapView.setAutoRotateEnabled(true, false);

                    mMapContainerView.requestLayout();
                } else {
                    stopMyLocation();
                }

                mMapView.postInvalidate();
            } else {
                boolean isMyLocationEnabled = mMapLocationManager.enableMyLocation(true);
                if (!isMyLocationEnabled) {
                    Toast.makeText(NMapViewer.this, "Please enable a My Location source in system settings",
                            Toast.LENGTH_LONG).show();

                    Intent goToSettings = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                    startActivity(goToSettings);

                    return;
                }
            }
        }
    }

    private void stopMyLocation() {
        if (mMyLocationOverlay != null) {
            mMapLocationManager.disableMyLocation();

            if (mMapView.isAutoRotateEnabled()) {
                mMyLocationOverlay.setCompassHeadingVisible(false);

                mMapCompassManager.disableCompass();

                mMapView.setAutoRotateEnabled(false, false);

                mMapContainerView.requestLayout();
            }
        }
    }

    //폴리곤 그리기, 경로 그리기 등등
    private void testPathDataOverlay() {
        //노원구 월계1동
        NMapPathData wolgye1=new NMapPathData(98);
        wolgye1.initPathData();
        for(int i=1;i<98;i+=2){
            double lat= wolgye1locat[i-1];
            double lon= wolgye1locat[i];
            wolgye1.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        wolgye1.endPathData();

        //노원구 월계2동
        NMapPathData wolgye2=new NMapPathData(78);
        wolgye2.initPathData();
        for(int i=1;i<78;i+=2){
            double lat= wolgye2locat[i-1];
            double lon= wolgye2locat[i];
            wolgye2.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        wolgye2.endPathData();

        //노원구 월계3동
        NMapPathData wolgye3=new NMapPathData(110);
        wolgye3.initPathData();
        for(int i=1;i<110;i+=2){
            double lat= wolgye3locat[i-1];
            double lon= wolgye3locat[i];
            wolgye3.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        wolgye3.endPathData();

        //노원구 공릉1동
        NMapPathData gongreung1=new NMapPathData(138);
        gongreung1.initPathData();
        for(int i=1;i<138;i+=2){
            double lat= gongreung1locat[i-1];
            double lon=gongreung1locat[i];
            gongreung1.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        gongreung1.endPathData();

        //노원구 공릉2동
        NMapPathData gongreung2=new NMapPathData(306);
        gongreung2.initPathData();
        for(int i=1;i<306;i+=2){
            double lat= gongreung2locat[i-1];
            double lon=gongreung2locat[i];
            gongreung2.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        gongreung2.endPathData();

        //노원구 하계1동
        NMapPathData hagye1=new NMapPathData(64);
        hagye1.initPathData();
        for(int i=1;i<64;i+=2){
            double lat= hagye1locat[i-1];
            double lon=hagye1locat[i];
            hagye1.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        hagye1.endPathData();

        //노원구 하계2동
        NMapPathData hagye2=new NMapPathData(42);
        hagye2.initPathData();
        for(int i=1;i<42;i+=2){
            double lat= hagye2locat[i-1];
            double lon=hagye2locat[i];
            hagye2.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        hagye2.endPathData();

        //노원구 중계본동
        NMapPathData joongyebon=new NMapPathData(112);
        joongyebon.initPathData();
        for(int i=1;i<112;i+=2){
            double lat= joongyebonlocat[i-1];
            double lon=joongyebonlocat[i];
            joongyebon.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        joongyebon.endPathData();

        //노원구 중계1동
        NMapPathData joongye1=new NMapPathData(70);
        joongye1.initPathData();
        for(int i=1;i<70;i+=2){
            double lat= joongye1locat[i-1];
            double lon=joongye1locat[i];
            joongye1.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        joongye1.endPathData();

        //노원구 중계2,3동
        NMapPathData joongye23=new NMapPathData(54);
        joongye23.initPathData();
        for(int i=1;i<54;i+=2){
            double lat= joongye23locat[i-1];
            double lon=joongye23locat[i];
            joongye23.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        joongye23.endPathData();

        //노원구 중계4동
        NMapPathData joongye4=new NMapPathData(48);
        joongye4.initPathData();
        for(int i=1;i<48;i+=2){
            double lat= joongye4locat[i-1];
            double lon=joongye4locat[i];
            joongye4.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        joongye4.endPathData();

        //노원구 상계1동
        NMapPathData sangye1=new NMapPathData(170);
        sangye1.initPathData();
        for(int i=1;i<170;i+=2){
            double lat= sangye1locat[i-1];
            double lon= sangye1locat[i];
            sangye1.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        sangye1.endPathData();

        //노원구 상계2동
        NMapPathData sangye2=new NMapPathData(84);
        sangye2.initPathData();
        for(int i=1;i<84;i+=2){
            double lat= sangye2locat[i-1];
            double lon= sangye2locat[i];
            sangye2.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        sangye2.endPathData();

        //노원구 상계3,4동
        NMapPathData sangye34=new NMapPathData(212);
        sangye34.initPathData();
        for(int i=1;i<212;i+=2){
            double lat= sangye34locat[i-1];
            double lon= sangye34locat[i];
            sangye34.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        sangye34.endPathData();

        //노원구 상계5동
        NMapPathData sangye5=new NMapPathData(56);
        sangye5.initPathData();
        for(int i=1;i<56;i+=2){
            double lat= sangye5locat[i-1];
            double lon= sangye5locat[i];
            sangye5.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        sangye5.endPathData();

        //노원구 상계6,7동
        NMapPathData sangye67=new NMapPathData(108);
        sangye67.initPathData();
        for(int i=1;i<108;i+=2){
            double lat= sangye67locat[i-1];
            double lon= sangye67locat[i];
            sangye67.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        sangye67.endPathData();

        //노원구 상계8동
        NMapPathData sangye8=new NMapPathData(44);
        sangye8.initPathData();
        for(int i=1;i<44;i+=2){
            double lat= sangye8locat[i-1];
            double lon= sangye8locat[i];
            sangye8.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        sangye8.endPathData();

        //노원구 상계9동
        NMapPathData sangye9=new NMapPathData(70);
        sangye9.initPathData();
        for(int i=1;i<70;i+=2){
            double lat= sangye9locat[i-1];
            double lon= sangye9locat[i];
            sangye9.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        sangye9.endPathData();

        //노원구 상계10동
        NMapPathData sangye10=new NMapPathData(78);
        sangye10.initPathData();
        for(int i=1;i<78;i+=2){
            double lat= sangye10locat[i-1];
            double lon= sangye10locat[i];
            sangye10.addPathPoint(lat,lon,NMapPathLineStyle.TYPE_DASH);
        }
        sangye10.endPathData();



        NMapPathDataOverlay pathDataOverlay = mOverlayManager.createPathDataOverlay(wolgye1);
        if (pathDataOverlay != null) {

            pathDataOverlay.addPathData(wolgye1);
            //월계1동 폴리곤 생성
            final NMapPathLineStyle wolgye1Polygon = new NMapPathLineStyle(mMapView.getContext());
            wolgye1Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            wolgye1Polygon.setLineColor(0x000000, 0xaa);
            wolgye1Polygon.setFillColor(0x99FF99, 0x55);
            wolgye1.setPathLineStyle(wolgye1Polygon);

            pathDataOverlay.addPathData(wolgye2);
            //월계2동 폴리곤 생성
            NMapPathLineStyle wolgye2Polygon = new NMapPathLineStyle(mMapView.getContext());
            wolgye2Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            wolgye2Polygon.setLineColor(0x000000, 0xaa);
            wolgye2Polygon.setFillColor(0xCC0000, 0x55);
            wolgye2.setPathLineStyle(wolgye2Polygon);

            pathDataOverlay.addPathData(wolgye3);
            //월계3동 폴리곤 생성
            NMapPathLineStyle wolgye3Polygon=new NMapPathLineStyle(mMapView.getContext());
            wolgye3Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            wolgye3Polygon.setLineColor(0x000000, 0xaa);
            wolgye3Polygon.setFillColor(0x0066CC, 0x55);
            wolgye3.setPathLineStyle(wolgye3Polygon);

            TimerTask timertask = new TimerTask() {
                @Override
                public void run() {
                    wolgye1Polygon.setFillColor(color[i], 0x55);
                    i++;
                    if(i==5){
                        i=0;
                    }
                }
            };

            timer.schedule(timertask,2000,2000);

            pathDataOverlay.addPathData(gongreung1);
            //공릉1동 폴리곤 생성
            NMapPathLineStyle gongreung1Polygon=new NMapPathLineStyle(mMapView.getContext());
            gongreung1Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            gongreung1Polygon.setLineColor(0x000000, 0xaa);
            gongreung1Polygon.setFillColor(0x993300,0x55);
            gongreung1.setPathLineStyle(gongreung1Polygon);

            pathDataOverlay.addPathData(gongreung2);
            //공릉2동 폴리곤 생성
            NMapPathLineStyle gongreung2Polygon=new NMapPathLineStyle(mMapView.getContext());
            gongreung2Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            gongreung2Polygon.setLineColor(0x000000, 0xaa);
            gongreung2Polygon.setFillColor(0xFFFF00,0x55);
            gongreung2.setPathLineStyle(gongreung2Polygon);

            pathDataOverlay.addPathData(hagye1);
            //하계1동 폴리곤 생성
            NMapPathLineStyle hagye1Polygon=new NMapPathLineStyle(mMapView.getContext());
            hagye1Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            hagye1Polygon.setLineColor(0x000000, 0xaa);
            hagye1Polygon.setFillColor(0xCCCCFF,0x55);
            hagye1.setPathLineStyle(hagye1Polygon);

            pathDataOverlay.addPathData(hagye2);
            //하계2동 폴리곤 생성
            NMapPathLineStyle hagye2Polygon=new NMapPathLineStyle(mMapView.getContext());
            hagye2Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            hagye2Polygon.setLineColor(0x000000, 0xaa);
            hagye2Polygon.setFillColor(0xFF00FF,0x55);
            hagye2.setPathLineStyle(hagye2Polygon);

            pathDataOverlay.addPathData(joongyebon);
            //중계본동 폴리곤 생성
            NMapPathLineStyle joongyebonPolygon=new NMapPathLineStyle(mMapView.getContext());
            joongyebonPolygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            joongyebonPolygon.setLineColor(0x000000, 0xaa);
            joongyebonPolygon.setFillColor(0x006699,0x55);
            joongyebon.setPathLineStyle(joongyebonPolygon);

            pathDataOverlay.addPathData(joongye1);
            //중계1동 폴리곤 생성
            NMapPathLineStyle joongye1Polygon=new NMapPathLineStyle(mMapView.getContext());
            joongye1Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            joongye1Polygon.setLineColor(0x000000, 0xaa);
            joongye1Polygon.setFillColor(0x9999CC,0x55);
            joongye1.setPathLineStyle(joongye1Polygon);

            pathDataOverlay.addPathData(joongye23);
            //중계2,3동 폴리곤 생성
            NMapPathLineStyle joongye23Polygon=new NMapPathLineStyle(mMapView.getContext());
            joongye23Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            joongye23Polygon.setLineColor(0x000000, 0xaa);
            joongye23Polygon.setFillColor(0xFFCCCC,0x55);
            joongye23.setPathLineStyle(joongye23Polygon);

            pathDataOverlay.addPathData(joongye4);
            //중계4동 폴리곤 생성
            NMapPathLineStyle joongye4Polygon=new NMapPathLineStyle(mMapView.getContext());
            joongye4Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            joongye4Polygon.setLineColor(0x000000, 0xaa);
            joongye4Polygon.setFillColor(0x3333CC,0x55);
            joongye4.setPathLineStyle(joongye4Polygon);

            pathDataOverlay.addPathData(sangye1);
            //상계1동 폴리곤 생성
            NMapPathLineStyle sangye1Polygon=new NMapPathLineStyle(mMapView.getContext());
            sangye1Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            sangye1Polygon.setLineColor(0x000000, 0xaa);
            sangye1Polygon.setFillColor(0xFFCC33,0x55);
            sangye1.setPathLineStyle(sangye1Polygon);

            pathDataOverlay.addPathData(sangye2);
            //상계2동 폴리곤 생성
            NMapPathLineStyle sangye2Polygon=new NMapPathLineStyle(mMapView.getContext());
            sangye2Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            sangye2Polygon.setLineColor(0x000000, 0xaa);
            sangye2Polygon.setFillColor(0xFFCC33,0x55);
            sangye2.setPathLineStyle(sangye2Polygon);

            pathDataOverlay.addPathData(sangye34);
            //상계3,4동 폴리곤 생성
            NMapPathLineStyle sangye34Polygon=new NMapPathLineStyle(mMapView.getContext());
            sangye34Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            sangye34Polygon.setLineColor(0x000000, 0xaa);
            sangye34Polygon.setFillColor(0xFF3366,0x55);
            sangye34.setPathLineStyle(sangye34Polygon);

            pathDataOverlay.addPathData(sangye5);
            //상계5동 폴리곤 생성
            NMapPathLineStyle sangye5Polygon=new NMapPathLineStyle(mMapView.getContext());
            sangye5Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            sangye5Polygon.setLineColor(0x000000, 0xaa);
            sangye5Polygon.setFillColor(0x00FFCC,0x55);
            sangye5.setPathLineStyle(sangye5Polygon);

            pathDataOverlay.addPathData(sangye67);
            //상계6,7동 폴리곤 생성
            NMapPathLineStyle sangye67Polygon=new NMapPathLineStyle(mMapView.getContext());
            sangye67Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            sangye67Polygon.setLineColor(0x000000, 0xaa);
            sangye67Polygon.setFillColor(0x339966,0x55);
            sangye67.setPathLineStyle(sangye67Polygon);

            pathDataOverlay.addPathData(sangye8);
            //상계8동 폴리곤 생성
            NMapPathLineStyle sangye8Polygon=new NMapPathLineStyle(mMapView.getContext());
            sangye8Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            sangye8Polygon.setLineColor(0x000000, 0xaa);
            sangye8Polygon.setFillColor(0x0000FF,0x55);
            sangye8.setPathLineStyle(sangye8Polygon);

            pathDataOverlay.addPathData(sangye9);
            //상계9동 폴리곤 생성
            NMapPathLineStyle sangye9Polygon=new NMapPathLineStyle(mMapView.getContext());
            sangye9Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            sangye9Polygon.setLineColor(0x000000, 0xaa);
            sangye9Polygon.setFillColor(0xCCFF00,0x55);
            sangye9.setPathLineStyle(sangye9Polygon);

            pathDataOverlay.addPathData(sangye10);
            //상계10동 폴리곤 생성
            NMapPathLineStyle sangye10Polygon=new NMapPathLineStyle(mMapView.getContext());
            sangye10Polygon.setPataDataType(NMapPathLineStyle.DATA_TYPE_POLYGON);
            sangye10Polygon.setLineColor(0x000000, 0xaa);
            sangye10Polygon.setFillColor(0xFF6633,0x55);
            sangye10.setPathLineStyle(sangye10Polygon);





            // add circle data
            /*NMapCircleData circleData = new NMapCircleData(1);
            circleData.initCircleData();
            circleData.addCirclePoint(127.0597, 37.6195, 50.0F);
            circleData.endCircleData();
            pathDataOverlay.addCircleData(circleData);

            // set circle style
            NMapCircleStyle circleStyle = new NMapCircleStyle(mMapView.getContext());
            circleStyle.setLineType(NMapPathLineStyle.TYPE_DASH);
            circleStyle.setFillColor(0xA050F2, 0x55);
            circleData.setCircleStyle(circleStyle);*/

            // show all path data
            pathDataOverlay.showAllPathData(0);
        }
    }

    private void testPathPOIdataOverlay() {

        // set POI data
        NMapPOIdata poiData = new NMapPOIdata(4, mMapViewerResourceProvider, true);
        poiData.beginPOIdata(4);
        poiData.addPOIitem(349652983, 149297368, "Pizza 124-456", NMapPOIflagType.FROM, null);
        poiData.addPOIitem(349652966, 149296906, null, NMapPOIflagType.NUMBER_BASE + 1, null);
        poiData.addPOIitem(349651062, 149296913, null, NMapPOIflagType.NUMBER_BASE + 999, null);
        poiData.addPOIitem(349651376, 149297750, "Pizza 000-999", NMapPOIflagType.TO, null);
        poiData.endPOIdata();

        // create POI data overlay
        NMapPOIdataOverlay poiDataOverlay = mOverlayManager.createPOIdataOverlay(poiData, null);

        // set event listener to the overlay
        poiDataOverlay.setOnStateChangeListener(onPOIdataStateChangeListener);

    }

    private void testPOIdataOverlay() {

        // Markers for POI item
        int markerId = NMapPOIflagType.PIN;

        // set POI data
        NMapPOIdata poiData = new NMapPOIdata(2, mMapViewerResourceProvider);
        poiData.beginPOIdata(2);
        NMapPOIitem item = poiData.addPOIitem(127.0597, 37.6195, "광운대", markerId, 0);
        item.setRightAccessory(true, NMapPOIflagType.CLICKABLE_ARROW);
        poiData.addPOIitem(127.0597, 37.6195, "광운대", markerId, 0);
        poiData.endPOIdata();

        // create POI data overlay
        NMapPOIdataOverlay poiDataOverlay = mOverlayManager.createPOIdataOverlay(poiData, null);

        // set event listener to the overlay
        poiDataOverlay.setOnStateChangeListener(onPOIdataStateChangeListener);

        // select an item
        poiDataOverlay.selectPOIitem(0, true);

        // show all POI data
        //poiDataOverlay.showAllPOIdata(0);
    }

    private void testFloatingPOIdataOverlay() {
        // Markers for POI item
        int marker1 = NMapPOIflagType.PIN;

        // set POI data
        NMapPOIdata poiData = new NMapPOIdata(1, mMapViewerResourceProvider);
        poiData.beginPOIdata(1);
        NMapPOIitem item = poiData.addPOIitem(null, "Touch & Drag to Move", marker1, 0);
        if (item != null) {
            // initialize location to the center of the map view.
            item.setPoint(mMapController.getMapCenter());
            // set floating mode
            item.setFloatingMode(NMapPOIitem.FLOATING_TOUCH | NMapPOIitem.FLOATING_DRAG);
            // show right button on callout
            item.setRightButton(true);

            mFloatingPOIitem = item;
        }
        poiData.endPOIdata();

        // create POI data overlay
        NMapPOIdataOverlay poiDataOverlay = mOverlayManager.createPOIdataOverlay(poiData, null);
        if (poiDataOverlay != null) {
            poiDataOverlay.setOnFloatingItemChangeListener(onPOIdataFloatingItemChangeListener);

            // set event listener to the overlay
            poiDataOverlay.setOnStateChangeListener(onPOIdataStateChangeListener);

            poiDataOverlay.selectPOIitem(0, false);

            mFloatingPOIdataOverlay = poiDataOverlay;
        }
    }

    /* NMapDataProvider Listener */
    private final OnDataProviderListener onDataProviderListener = new OnDataProviderListener() {

        @Override
        public void onReverseGeocoderResponse(NMapPlacemark placeMark, NMapError errInfo) {

            if (DEBUG) {
                Log.i(LOG_TAG, "onReverseGeocoderResponse: placeMark="
                        + ((placeMark != null) ? placeMark.toString() : null));
            }

            if (errInfo != null) {
                Log.e(LOG_TAG, "Failed to findPlacemarkAtLocation: error=" + errInfo.toString());

                Toast.makeText(NMapViewer.this, errInfo.toString(), Toast.LENGTH_LONG).show();
                return;
            }

            if (mFloatingPOIitem != null && mFloatingPOIdataOverlay != null) {
                mFloatingPOIdataOverlay.deselectFocusedPOIitem();

                if (placeMark != null) {
                    mFloatingPOIitem.setTitle(placeMark.toString());
                }
                mFloatingPOIdataOverlay.selectPOIitemBy(mFloatingPOIitem.getId(), false);
            }
        }

    };

    /* MyLocation Listener */
    private final NMapLocationManager.OnLocationChangeListener onMyLocationChangeListener = new NMapLocationManager.OnLocationChangeListener() {

        @Override
        public boolean onLocationChanged(NMapLocationManager locationManager, NGeoPoint myLocation) {

            if (mMapController != null) {
                mMapController.animateTo(myLocation);
            }

            return true;
        }

        @Override
        public void onLocationUpdateTimeout(NMapLocationManager locationManager) {

            // stop location updating
            //			Runnable runnable = new Runnable() {
            //				public void run() {
            //					stopMyLocation();
            //				}
            //			};
            //			runnable.run();

            Toast.makeText(NMapViewer.this, "Your current location is temporarily unavailable.", Toast.LENGTH_LONG).show();
        }

        @Override
        public void onLocationUnavailableArea(NMapLocationManager locationManager, NGeoPoint myLocation) {

            Toast.makeText(NMapViewer.this, "Your current location is unavailable area.", Toast.LENGTH_LONG).show();

            stopMyLocation();
        }

    };

    /* MapView State Change Listener*/
    private final NMapView.OnMapStateChangeListener onMapViewStateChangeListener = new NMapView.OnMapStateChangeListener() {

        @Override
        public void onMapInitHandler(NMapView mapView, NMapError errorInfo) {

            if (errorInfo == null) { // success
                // restore map view state such as map center position and zoom level.
                restoreInstanceState();

            } else { // fail
                Log.e(LOG_TAG, "onFailedToInitializeWithError: " + errorInfo.toString());

                Toast.makeText(NMapViewer.this, errorInfo.toString(), Toast.LENGTH_LONG).show();
            }
        }

        @Override
        public void onAnimationStateChange(NMapView mapView, int animType, int animState) {
            if (DEBUG) {
                Log.i(LOG_TAG, "onAnimationStateChange: animType=" + animType + ", animState=" + animState);
            }
        }

        @Override
        public void onMapCenterChange(NMapView mapView, NGeoPoint center) {
            if (DEBUG) {
                Log.i(LOG_TAG, "onMapCenterChange: center=" + center.toString());
            }
        }

        @Override
        public void onZoomLevelChange(NMapView mapView, int level) {
            if (DEBUG) {
                Log.i(LOG_TAG, "onZoomLevelChange: level=" + level);
            }
        }

        @Override
        public void onMapCenterChangeFine(NMapView mapView) {

        }
    };

    private final NMapView.OnMapViewTouchEventListener onMapViewTouchEventListener = new NMapView.OnMapViewTouchEventListener() {

        @Override
        public void onLongPress(NMapView mapView, MotionEvent ev) {
            // TODO Auto-generated method stub

        }

        @Override
        public void onLongPressCanceled(NMapView mapView) {
            // TODO Auto-generated method stub

        }

        @Override
        public void onSingleTapUp(NMapView mapView, MotionEvent ev) {
            // TODO Auto-generated method stub

        }

        @Override
        public void onTouchDown(NMapView mapView, MotionEvent ev) {

        }

        @Override
        public void onScroll(NMapView mapView, MotionEvent e1, MotionEvent e2) {
        }

        @Override
        public void onTouchUp(NMapView mapView, MotionEvent ev) {
            // TODO Auto-generated method stub

        }

    };

    private final NMapView.OnMapViewDelegate onMapViewTouchDelegate = new NMapView.OnMapViewDelegate() {

        @Override
        public boolean isLocationTracking() {
            if (mMapLocationManager != null) {
                if (mMapLocationManager.isMyLocationEnabled()) {
                    return mMapLocationManager.isMyLocationFixed();
                }
            }
            return false;
        }

    };

    /* POI data State Change Listener*/
    private final NMapPOIdataOverlay.OnStateChangeListener onPOIdataStateChangeListener = new NMapPOIdataOverlay.OnStateChangeListener() {

        @Override
        public void onCalloutClick(NMapPOIdataOverlay poiDataOverlay, NMapPOIitem item) {
            if (DEBUG) {
                Log.i(LOG_TAG, "onCalloutClick: title=" + item.getTitle());
            }

            // [[TEMP]] handle a click event of the callout
            Toast.makeText(NMapViewer.this, "onCalloutClick: " + item.getTitle(), Toast.LENGTH_LONG).show();
        }

        @Override
        public void onFocusChanged(NMapPOIdataOverlay poiDataOverlay, NMapPOIitem item) {
            if (DEBUG) {
                if (item != null) {
                    Log.i(LOG_TAG, "onFocusChanged: " + item.toString());
                } else {
                    Log.i(LOG_TAG, "onFocusChanged: ");
                }
            }
        }
    };

    private final NMapPOIdataOverlay.OnFloatingItemChangeListener onPOIdataFloatingItemChangeListener = new NMapPOIdataOverlay.OnFloatingItemChangeListener() {

        @Override
        public void onPointChanged(NMapPOIdataOverlay poiDataOverlay, NMapPOIitem item) {
            NGeoPoint point = item.getPoint();

            if (DEBUG) {
                Log.i(LOG_TAG, "onPointChanged: point=" + point.toString());
            }

            findPlacemarkAtLocation(point.longitude, point.latitude);

            item.setTitle(null);

        }
    };

    private final NMapOverlayManager.OnCalloutOverlayListener onCalloutOverlayListener = new NMapOverlayManager.OnCalloutOverlayListener() {

        @Override
        public NMapCalloutOverlay onCreateCalloutOverlay(NMapOverlay itemOverlay, NMapOverlayItem overlayItem,
                                                         Rect itemBounds) {

            // handle overlapped items
            if (itemOverlay instanceof NMapPOIdataOverlay) {
                NMapPOIdataOverlay poiDataOverlay = (NMapPOIdataOverlay)itemOverlay;

                // check if it is selected by touch event
                if (!poiDataOverlay.isFocusedBySelectItem()) {
                    int countOfOverlappedItems = 1;

                    NMapPOIdata poiData = poiDataOverlay.getPOIdata();
                    for (int i = 0; i < poiData.count(); i++) {
                        NMapPOIitem poiItem = poiData.getPOIitem(i);

                        // skip selected item
                        if (poiItem == overlayItem) {
                            continue;
                        }

                        // check if overlapped or not
                        if (Rect.intersects(poiItem.getBoundsInScreen(), overlayItem.getBoundsInScreen())) {
                            countOfOverlappedItems++;
                        }
                    }

                    if (countOfOverlappedItems > 1) {
                        String text = countOfOverlappedItems + " overlapped items for " + overlayItem.getTitle();
                        Toast.makeText(NMapViewer.this, text, Toast.LENGTH_LONG).show();
                        return null;
                    }
                }
            }

            // use custom old callout overlay
            if (overlayItem instanceof NMapPOIitem) {
                NMapPOIitem poiItem = (NMapPOIitem)overlayItem;

                if (poiItem.showRightButton()) {
                    return new NMapCalloutCustomOldOverlay(itemOverlay, overlayItem, itemBounds,
                            mMapViewerResourceProvider);
                }
            }

            // use custom callout overlay
            return new NMapCalloutCustomOverlay(itemOverlay, overlayItem, itemBounds, mMapViewerResourceProvider);

            // set basic callout overlay
            //return new NMapCalloutBasicOverlay(itemOverlay, overlayItem, itemBounds);
        }

    };

    private final NMapOverlayManager.OnCalloutOverlayViewListener onCalloutOverlayViewListener = new NMapOverlayManager.OnCalloutOverlayViewListener() {

        @Override
        public View onCreateCalloutOverlayView(NMapOverlay itemOverlay, NMapOverlayItem overlayItem, Rect itemBounds) {

            if (overlayItem != null) {
                // [TEST] 말풍선 오버레이를 뷰로 설정함
                String title = overlayItem.getTitle();
                if (title != null && title.length() > 5) {
                    return new NMapCalloutCustomOverlayView(NMapViewer.this, itemOverlay, overlayItem, itemBounds);
                }
            }

            // null을 반환하면 말풍선 오버레이를 표시하지 않음
            return null;
        }

    };

    /* Local Functions */
    private static boolean mIsMapEnlared = false;

    private void restoreInstanceState() {
        mPreferences = getPreferences(MODE_PRIVATE);

        int longitudeE6 = mPreferences.getInt(KEY_CENTER_LONGITUDE, NMAP_LOCATION_DEFAULT.getLongitudeE6());
        int latitudeE6 = mPreferences.getInt(KEY_CENTER_LATITUDE, NMAP_LOCATION_DEFAULT.getLatitudeE6());
        int level = mPreferences.getInt(KEY_ZOOM_LEVEL, NMAP_ZOOMLEVEL_DEFAULT);
        int viewMode = mPreferences.getInt(KEY_VIEW_MODE, NMAP_VIEW_MODE_DEFAULT);
        boolean trafficMode = mPreferences.getBoolean(KEY_TRAFFIC_MODE, NMAP_TRAFFIC_MODE_DEFAULT);
        boolean bicycleMode = mPreferences.getBoolean(KEY_BICYCLE_MODE, NMAP_BICYCLE_MODE_DEFAULT);

        mMapController.setMapViewMode(viewMode);
        mMapController.setMapViewTrafficMode(trafficMode);
        mMapController.setMapViewBicycleMode(bicycleMode);
        mMapController.setMapCenter(new NGeoPoint(longitudeE6, latitudeE6), level);

        if (mIsMapEnlared) {
            mMapView.setScalingFactor(2.0F);
        } else {
            mMapView.setScalingFactor(1.0F);
        }
    }

    private void saveInstanceState() {
        if (mPreferences == null) {
            return;
        }

        NGeoPoint center = mMapController.getMapCenter();
        int level = mMapController.getZoomLevel();
        int viewMode = mMapController.getMapViewMode();
        boolean trafficMode = mMapController.getMapViewTrafficMode();
        boolean bicycleMode = mMapController.getMapViewBicycleMode();

        SharedPreferences.Editor edit = mPreferences.edit();

        edit.putInt(KEY_CENTER_LONGITUDE, center.getLongitudeE6());
        edit.putInt(KEY_CENTER_LATITUDE, center.getLatitudeE6());
        edit.putInt(KEY_ZOOM_LEVEL, level);
        edit.putInt(KEY_VIEW_MODE, viewMode);
        edit.putBoolean(KEY_TRAFFIC_MODE, trafficMode);
        edit.putBoolean(KEY_BICYCLE_MODE, bicycleMode);

        edit.commit();

    }

    /**
     * Invoked during init to give the Activity a chance to set up its Menu.
     *
     * @param menu the Menu to which entries may be added
     * @return true
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu, menu);
        return true;
    }

    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        int viewMode = mMapController.getMapViewMode();
        boolean isTraffic = mMapController.getMapViewTrafficMode();
        boolean isBicycle = mMapController.getMapViewBicycleMode();
        //boolean isAlphaLayer = mMapController.getMapAlphaLayerMode();

        menu.findItem(R.id.action_revert).setEnabled((viewMode != NMapView.VIEW_MODE_VECTOR) || isTraffic || mOverlayManager.sizeofOverlays() > 0);
        menu.findItem(R.id.action_vector).setChecked(viewMode == NMapView.VIEW_MODE_VECTOR);
        menu.findItem(R.id.action_satellite).setChecked(viewMode == NMapView.VIEW_MODE_HYBRID);
        menu.findItem(R.id.action_traffic).setChecked(isTraffic);
        menu.findItem(R.id.action_bicycle).setChecked(isBicycle);
        //menu.findItem(R.id.action_alpha_layer).setChecked(isAlphaLayer);

        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.action_revert:
                if (mMyLocationOverlay != null) {
                    stopMyLocation();
                    mOverlayManager.removeOverlay(mMyLocationOverlay);
                }

                mMapController.setMapViewMode(NMapView.VIEW_MODE_VECTOR);
                mMapController.setMapViewTrafficMode(false);
                mMapController.setMapViewBicycleMode(false);

                mOverlayManager.clearOverlays();
                return true;
            case R.id.action_vector:
                invalidateMenu();
                mMapController.setMapViewMode(NMapView.VIEW_MODE_VECTOR);
                return true;

            case R.id.action_satellite:
                invalidateMenu();
                mMapController.setMapViewMode(NMapView.VIEW_MODE_HYBRID);
                return true;

            case R.id.action_traffic:
                invalidateMenu();
                mMapController.setMapViewTrafficMode(!mMapController.getMapViewTrafficMode());
                return true;

            case R.id.action_bicycle:
                invalidateMenu();
                mMapController.setMapViewBicycleMode(!mMapController.getMapViewBicycleMode());
                return true;

            case R.id.action_alpha_layer:
                //invalidateMenu();
                //mMapController.setMapAlphaLayerMode(!mMapController.getMapAlphaLayerMode(), 0xccFFFFFF);
                return true;

            case R.id.action_zoom:
                mMapView.displayZoomControls(true);
                return true;

            case R.id.action_my_location:
                startMyLocation();
                return true;

            case R.id.action_poi_data:
                mOverlayManager.clearOverlays();

                // add POI data overlay
                testPOIdataOverlay();
                return true;

            case R.id.action_path_data:
                mOverlayManager.clearOverlays();

                // add path data overlay
                testPathDataOverlay();

                // add path POI data overlay
                testPathPOIdataOverlay();
                return true;

            case R.id.action_floating_data:
                mOverlayManager.clearOverlays();
                testFloatingPOIdataOverlay();
                return true;

            case R.id.action_new_activity:
                Intent intent = new Intent(this, FragmentMapActivity.class);
                startActivity(intent);
                return true;

            case R.id.action_visible_bounds:
                // test visible bounds
                Rect viewFrame = mMapView.getMapController().getViewFrameVisible();
                mMapController.setBoundsVisible(0, 0, viewFrame.width(), viewFrame.height() - 200);

                // add POI data overlay
                mOverlayManager.clearOverlays();

                testPathDataOverlay();
                return true;

            case R.id.action_scale_factor:
                if (mMapView.getMapProjection().isProjectionScaled()) {
                    if (mMapView.getMapProjection().isMapHD()) {
                        mMapView.setScalingFactor(2.0F, false);
                    } else {
                        mMapView.setScalingFactor(1.0F, false);
                    }
                } else {
                    mMapView.setScalingFactor(2.0F, true);
                }
                mIsMapEnlared = mMapView.getMapProjection().isProjectionScaled();
                return true;

            case R.id.action_auto_rotate:
                if (mMapView.isAutoRotateEnabled()) {
                    mMapView.setAutoRotateEnabled(false, false);

                    mMapContainerView.requestLayout();

                    mHnadler.removeCallbacks(mTestAutoRotation);
                } else {

                    mMapView.setAutoRotateEnabled(true, false);

                    mMapView.setRotateAngle(30);
                    mHnadler.postDelayed(mTestAutoRotation, AUTO_ROTATE_INTERVAL);

                    mMapContainerView.requestLayout();
                }
                return true;
            case R.id.action_navermap:
                mMapView.executeNaverMap();
                return true;

        }
        return false;
    }

    private void invalidateMenu() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
            invalidateOptionsMenu();
        }
    }

    private static final long AUTO_ROTATE_INTERVAL = 2000;
    private final Handler mHnadler = new Handler();
    private final Runnable mTestAutoRotation = new Runnable() {
        @Override
        public void run() {
//        	if (mMapView.isAutoRotateEnabled()) {
//    			float degree = (float)Math.random()*360;
//
//    			degree = mMapView.getRoateAngle() + 30;
//
//    			mMapView.setRotateAngle(degree);
//
//            	mHnadler.postDelayed(mTestAutoRotation, AUTO_ROTATE_INTERVAL);
//        	}
        }
    };

    /**
     * Container view class to rotate map view.
     */
    private class MapContainerView extends ViewGroup {

        public MapContainerView(Context context) {
            super(context);
        }

        @Override
        protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
            final int width = getWidth();
            final int height = getHeight();
            final int count = getChildCount();
            for (int i = 0; i < count; i++) {
                final View view = getChildAt(i);
                final int childWidth = view.getMeasuredWidth();
                final int childHeight = view.getMeasuredHeight();
                final int childLeft = (width - childWidth) / 2;
                final int childTop = (height - childHeight) / 2;
                view.layout(childLeft, childTop, childLeft + childWidth, childTop + childHeight);
            }

            if (changed) {
                mOverlayManager.onSizeChanged(width, height);
            }
        }

        @Override
        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
            int w = getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec);
            int h = getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec);
            int sizeSpecWidth = widthMeasureSpec;
            int sizeSpecHeight = heightMeasureSpec;

            final int count = getChildCount();
            for (int i = 0; i < count; i++) {
                final View view = getChildAt(i);

                if (view instanceof NMapView) {
                    if (mMapView.isAutoRotateEnabled()) {
                        int diag = (((int)(Math.sqrt(w * w + h * h)) + 1) / 2 * 2);
                        sizeSpecWidth = MeasureSpec.makeMeasureSpec(diag, MeasureSpec.EXACTLY);
                        sizeSpecHeight = sizeSpecWidth;
                    }
                }

                view.measure(sizeSpecWidth, sizeSpecHeight);
            }
            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        }
    }
}
